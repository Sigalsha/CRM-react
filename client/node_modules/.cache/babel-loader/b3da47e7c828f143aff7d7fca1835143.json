{"ast":null,"code":"import axios from \"axios\";\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\";\nimport { returnErrors } from \"./errorActions\"; // check token & load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    //debugger;\n    // user loading\n    dispatch({\n      type: USER_LOADING\n    });\n    axios.get(\"/auth/user\", tokenConfig(getState)).then(function (res) {\n      return dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  };\n}; // Register user\n\nexport var register = function register(_ref) {\n  var name = _ref.name,\n      email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    // headers\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // req body\n\n    var body = JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    });\n    axios.post(\"/auth/register\", body, config).then(function (res) {\n      return dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n}; // login user\n\nexport var login = function login(_ref2) {\n  var email = _ref2.email,\n      password = _ref2.password;\n  return function (dispatch) {\n    // headers\n    var config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // req body\n\n    var body = JSON.stringify({\n      email: email,\n      password: password\n    });\n    axios.post(\"/auth/login\", body, config).then(function (res) {\n      return dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n}; // logout user\n\nexport var logout = function logout() {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // get token from localStorage\n  var token = getState().auth.token; // headers\n\n  var config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // if token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/sigal/code/projects/CRM-react/client/src/actions/authActions.js"],"names":["axios","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  USER_LOADING,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\nimport { returnErrors } from \"./errorActions\";\n\n// check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  //debugger;\n  // user loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/auth/user\", tokenConfig(getState))\n    .then((res) => dispatch({ type: USER_LOADED, payload: res.data }))\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({ type: AUTH_ERROR });\n    });\n};\n\n// Register user\nexport const register =\n  ({ name, email, password }) =>\n  (dispatch) => {\n    // headers\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n\n    // req body\n    const body = JSON.stringify({ name, email, password });\n\n    axios\n      .post(\"/auth/register\", body, config)\n      .then((res) => dispatch({ type: REGISTER_SUCCESS, payload: res.data }))\n      .catch((err) => {\n        dispatch(\n          returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n        );\n        dispatch({ type: REGISTER_FAIL });\n      });\n  };\n\n// login user\nexport const login =\n  ({ email, password }) =>\n  (dispatch) => {\n    // headers\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" }\n    };\n\n    // req body\n    const body = JSON.stringify({ email, password });\n\n    axios\n      .post(\"/auth/login\", body, config)\n      .then((res) => dispatch({ type: LOGIN_SUCCESS, payload: res.data }))\n      .catch((err) => {\n        dispatch(\n          returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\n        );\n        dispatch({ type: LOGIN_FAIL });\n      });\n  };\n\n// logout user\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// setup config/headers and token\nexport const tokenConfig = (getState) => {\n  // get token from localStorage\n  const token = getState().auth.token;\n\n  // headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  // if token, add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}