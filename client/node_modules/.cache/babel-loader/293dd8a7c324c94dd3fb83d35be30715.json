{"ast":null,"code":"import _toConsumableArray from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/home/sigal/code/projects/CRM-react/client/src/components/actions/Actions.js\",\n    _this3 = this;\n\nimport React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport axios from \"axios\"; // import call from \"../../ApiCalls/ApiCalls\";\n\nimport utils from \"../../utils/utils\";\nimport { URL, CLIENTS_HEADERS, COLORS, ACTION_HEADERS } from \"../../utils/consts\";\nimport \"../../styles/actions/actions.css\";\nimport ClientInput from \"./ClientInput\";\nimport UpdateClient from \"./UpdateClient.js\";\nimport AddClient from \"./AddClient.js\";\n\nvar Actions = /*#__PURE__*/function (_Component) {\n  _inherits(Actions, _Component);\n\n  function Actions() {\n    var _this;\n\n    _classCallCheck(this, Actions);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Actions).call(this));\n\n    _this.getCurrentClient = function (event) {\n      var _this$state = _this.state,\n          clients = _this$state.clients,\n          currentClient = _this$state.currentClient;\n      var value = event.target.value;\n      var chosenClient = clients.filter(function (c) {\n        return value === c.name;\n      });\n\n      if (chosenClient.length && chosenClient[0] !== currentClient) {\n        _this.setState({\n          currentClient: chosenClient[0]\n        });\n      } else if (value === \"\") {\n        _this.setState({\n          currentClient: value\n        });\n      }\n    };\n\n    _this.updateClient = function (updatedClientData) {\n      var currentClient = _this.state.currentClient;\n      var updatedClient = {\n        emailType: updatedClientData.emailType ? updatedClientData.emailType : currentClient.emailType,\n        sold: updatedClientData.sold ? updatedClientData.sold : currentClient.sold,\n        owner: updatedClientData.owner ? updatedClientData.owner : currentClient.owner\n      };\n      axios.put(\"\".concat(URL).concat(currentClient._id), _objectSpread({}, currentClient, updatedClient)).then(function (res) {\n        console.log(\"res from update client (put) backend \", res);\n      }).catch(function (err) {\n        return console.log(\"err from update client (put) backend \", err);\n      });\n\n      _this.setState({\n        currentClient: \"\"\n      }, _this.getClientsFromServer); // this.sendUpdatedClient(client, updatedClient)\n\n    };\n\n    _this.addNewClient = function (newClient) {\n      var clients = _this.state.clients; // debugger;\n\n      axios.post(\"\".concat(URL, \"add\"), newClient).then(function (res) {\n        console.log(\"res from add new client (post) backend \", res);\n      }).catch(function (err) {\n        console.log(\"err from add new client (post) backend \", err);\n      });\n\n      _this.setState({\n        clients: [].concat(_toConsumableArray(clients), [newClient])\n      }, _this.getClientsFromServer); //should get the client from the server with an Id, then update it in the state?\n      //Or get all the clients including the new client\n\n    };\n\n    _this.state = {\n      loading: true,\n      emailType: [\"A\", \"B\", \"C\", \"D\"],\n      owners: [],\n      currentClient: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Actions, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getClientsFromServer();\n      /*  setTimeout(() => {\n        let data = call.getClients();\n        this.setState({\n          loading: false,\n          clients: data,\n          owners: utils.reduceDuplications(\n            utils.getClientProperty(CLIENTS_HEADERS[\"owner\"], data)\n          ),\n          currentClient: \"\",\n        });\n      }, 1000); */\n    }\n  }, {\n    key: \"getClientsFromServer\",\n    value: function getClientsFromServer() {\n      var _this2 = this;\n\n      axios.get(URL).then(function (res) {\n        console.log(\"res from clients backend: \", res.data.data);\n\n        if (res.data.data.length) {\n          var data = res.data.data;\n\n          _this2.setState({\n            loading: false,\n            clients: data,\n            owners: utils.reduceDuplications(utils.getClientProperty(CLIENTS_HEADERS[\"owner\"], data)),\n            currentClient: \"\"\n          });\n        }\n      }).catch(function (err) {\n        console.log(\"err from clients backend: \", err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          loading = _this$state2.loading,\n          clients = _this$state2.clients,\n          owners = _this$state2.owners,\n          emailType = _this$state2.emailType,\n          currentClient = _this$state2.currentClient;\n\n      if (loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"loader-position\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Loader, {\n          type: \"Puff\",\n          color: COLORS[\"yellow\"],\n          height: 200,\n          width: 200,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"actions-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ActionHeader, {\n        text: ACTION_HEADERS[\"main\"][\"update\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ClientInput, {\n        clients: clients,\n        getCurrentClient: this.getCurrentClient,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(UpdateClient, {\n        owners: owners,\n        emailTypes: emailType,\n        updateClient: this.updateClient,\n        currentClient: currentClient,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ActionHeader, {\n        text: ACTION_HEADERS[\"main\"][\"addClient\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AddClient, {\n        addNewClient: this.addNewClient,\n        owners: owners,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Actions;\n}(Component);\n\nvar ActionHeader = function ActionHeader(_ref) {\n  var text = _ref.text;\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"actions-header\",\n    __self: _this3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 36\n    }\n  }, text);\n};\n\nexport default Actions;","map":{"version":3,"sources":["/home/sigal/code/projects/CRM-react/client/src/components/actions/Actions.js"],"names":["React","Component","Loader","axios","utils","URL","CLIENTS_HEADERS","COLORS","ACTION_HEADERS","ClientInput","UpdateClient","AddClient","Actions","getCurrentClient","event","state","clients","currentClient","value","target","chosenClient","filter","c","name","length","setState","updateClient","updatedClientData","updatedClient","emailType","sold","owner","put","_id","then","res","console","log","catch","err","getClientsFromServer","addNewClient","newClient","post","loading","owners","get","data","reduceDuplications","getClientProperty","ActionHeader","text"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SACEC,GADF,EAEEC,eAFF,EAGEC,MAHF,EAIEC,cAJF,QAKO,oBALP;AAMA,OAAO,kCAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;;IACMC,O;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;;AADY,UA+CdC,gBA/Cc,GA+CK,UAACC,KAAD,EAAW;AAAA,wBACO,MAAKC,KADZ;AAAA,UACpBC,OADoB,eACpBA,OADoB;AAAA,UACXC,aADW,eACXA,aADW;AAAA,UAEpBC,KAFoB,GAEVJ,KAAK,CAACK,MAFI,CAEpBD,KAFoB;AAI5B,UAAIE,YAAY,GAAGJ,OAAO,CAACK,MAAR,CAAe,UAACC,CAAD;AAAA,eAAOJ,KAAK,KAAKI,CAAC,CAACC,IAAnB;AAAA,OAAf,CAAnB;;AAEA,UAAIH,YAAY,CAACI,MAAb,IAAuBJ,YAAY,CAAC,CAAD,CAAZ,KAAoBH,aAA/C,EAA8D;AAC5D,cAAKQ,QAAL,CAAc;AAAER,UAAAA,aAAa,EAAEG,YAAY,CAAC,CAAD;AAA7B,SAAd;AACD,OAFD,MAEO,IAAIF,KAAK,KAAK,EAAd,EAAkB;AACvB,cAAKO,QAAL,CAAc;AAAER,UAAAA,aAAa,EAAEC;AAAjB,SAAd;AACD;AACF,KA1Da;;AAAA,UA2EdQ,YA3Ec,GA2EC,UAACC,iBAAD,EAAuB;AAAA,UAC5BV,aAD4B,GACV,MAAKF,KADK,CAC5BE,aAD4B;AAGpC,UAAMW,aAAa,GAAG;AACpBC,QAAAA,SAAS,EAAEF,iBAAiB,CAACE,SAAlB,GACPF,iBAAiB,CAACE,SADX,GAEPZ,aAAa,CAACY,SAHE;AAIpBC,QAAAA,IAAI,EAAEH,iBAAiB,CAACG,IAAlB,GACFH,iBAAiB,CAACG,IADhB,GAEFb,aAAa,CAACa,IANE;AAOpBC,QAAAA,KAAK,EAAEJ,iBAAiB,CAACI,KAAlB,GACHJ,iBAAiB,CAACI,KADf,GAEHd,aAAa,CAACc;AATE,OAAtB;AAYA5B,MAAAA,KAAK,CACF6B,GADH,WACU3B,GADV,SACgBY,aAAa,CAACgB,GAD9B,qBAEOhB,aAFP,EAGOW,aAHP,GAKGM,IALH,CAKQ,UAACC,GAAD,EAAS;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDF,GAArD;AACD,OAPH,EAQGG,KARH,CAQS,UAACC,GAAD;AAAA,eACLH,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDE,GAArD,CADK;AAAA,OART;;AAYA,YAAKd,QAAL,CAAc;AAAER,QAAAA,aAAa,EAAE;AAAjB,OAAd,EAAqC,MAAKuB,oBAA1C,EA3BoC,CA6BpC;;AACD,KAzGa;;AAAA,UA2GdC,YA3Gc,GA2GC,UAACC,SAAD,EAAe;AAAA,UACpB1B,OADoB,GACR,MAAKD,KADG,CACpBC,OADoB,EAE5B;;AACAb,MAAAA,KAAK,CACFwC,IADH,WACWtC,GADX,UACqBqC,SADrB,EAEGR,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDF,GAAvD;AACD,OAJH,EAKGG,KALH,CAKS,UAACC,GAAD,EAAS;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuDE,GAAvD;AACD,OAPH;;AASA,YAAKd,QAAL,CACE;AACET,QAAAA,OAAO,+BAAMA,OAAN,IAAe0B,SAAf;AADT,OADF,EAIE,MAAKF,oBAJP,EAZ4B,CAkB5B;AACA;;AACD,KA/Ha;;AAEZ,UAAKzB,KAAL,GAAa;AACX6B,MAAAA,OAAO,EAAE,IADE;AAEXf,MAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAFA;AAGXgB,MAAAA,MAAM,EAAE,EAHG;AAIX5B,MAAAA,aAAa,EAAE;AAJJ,KAAb;AAFY;AAQb;;;;wCAEmB;AAClB,WAAKuB,oBAAL;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;;;2CAEsB;AAAA;;AACrBrC,MAAAA,KAAK,CACF2C,GADH,CACOzC,GADP,EAEG6B,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,GAAG,CAACY,IAAJ,CAASA,IAAnD;;AACA,YAAIZ,GAAG,CAACY,IAAJ,CAASA,IAAT,CAAcvB,MAAlB,EAA0B;AAAA,cAChBuB,IADgB,GACPZ,GAAG,CAACY,IADG,CAChBA,IADgB;;AAExB,UAAA,MAAI,CAACtB,QAAL,CAAc;AACZmB,YAAAA,OAAO,EAAE,KADG;AAEZ5B,YAAAA,OAAO,EAAE+B,IAFG;AAGZF,YAAAA,MAAM,EAAEzC,KAAK,CAAC4C,kBAAN,CACN5C,KAAK,CAAC6C,iBAAN,CAAwB3C,eAAe,CAAC,OAAD,CAAvC,EAAkDyC,IAAlD,CADM,CAHI;AAMZ9B,YAAAA,aAAa,EAAE;AANH,WAAd;AAQD;AACF,OAfH,EAgBGqB,KAhBH,CAgBS,UAACC,GAAD,EAAS;AACdH,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CE,GAA1C;AACD,OAlBH;AAmBD;;;6BAoFQ;AAAA,yBACwD,KAAKxB,KAD7D;AAAA,UACC6B,OADD,gBACCA,OADD;AAAA,UACU5B,OADV,gBACUA,OADV;AAAA,UACmB6B,MADnB,gBACmBA,MADnB;AAAA,UAC2BhB,SAD3B,gBAC2BA,SAD3B;AAAA,UACsCZ,aADtC,gBACsCA,aADtC;;AAGP,UAAI2B,OAAJ,EAAa;AACX,4BACE;AAAK,UAAA,EAAE,EAAC,iBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,MAAD;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,KAAK,EAAErC,MAAM,CAAC,QAAD,CAFf;AAGE,UAAA,MAAM,EAAE,GAHV;AAIE,UAAA,KAAK,EAAE,GAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAUD;;AACD,0BACE;AAAK,QAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAEC,cAAc,CAAC,MAAD,CAAd,CAAuB,QAAvB,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,eAIE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,WAAD;AACE,QAAA,OAAO,EAAEQ,OADX;AAEE,QAAA,gBAAgB,EAAE,KAAKH,gBAFzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAJF,eAUE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AACE,QAAA,MAAM,EAAEgC,MADV;AAEE,QAAA,UAAU,EAAEhB,SAFd;AAGE,QAAA,YAAY,EAAE,KAAKH,YAHrB;AAIE,QAAA,aAAa,EAAET,aAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAVF,eAkBE;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,eAmBE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAET,cAAc,CAAC,MAAD,CAAd,CAAuB,WAAvB,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAnBF,eAsBE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,YAAY,EAAE,KAAKiC,YAA9B;AAA4C,QAAA,MAAM,EAAEI,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAtBF,CADF;AA4BD;;;;EA7KmB5C,S;;AAgLtB,IAAMiD,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,sBAAc;AAAI,IAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCA,IAAhC,CAAd;AAAA,CAArB;;AAEA,eAAevC,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport axios from \"axios\";\n// import call from \"../../ApiCalls/ApiCalls\";\nimport utils from \"../../utils/utils\";\nimport {\n  URL,\n  CLIENTS_HEADERS,\n  COLORS,\n  ACTION_HEADERS,\n} from \"../../utils/consts\";\nimport \"../../styles/actions/actions.css\";\nimport ClientInput from \"./ClientInput\";\nimport UpdateClient from \"./UpdateClient.js\";\nimport AddClient from \"./AddClient.js\";\nclass Actions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      emailType: [\"A\", \"B\", \"C\", \"D\"],\n      owners: [],\n      currentClient: \"\",\n    };\n  }\n\n  componentDidMount() {\n    this.getClientsFromServer();\n    /*  setTimeout(() => {\n      let data = call.getClients();\n      this.setState({\n        loading: false,\n        clients: data,\n        owners: utils.reduceDuplications(\n          utils.getClientProperty(CLIENTS_HEADERS[\"owner\"], data)\n        ),\n        currentClient: \"\",\n      });\n    }, 1000); */\n  }\n\n  getClientsFromServer() {\n    axios\n      .get(URL)\n      .then((res) => {\n        console.log(\"res from clients backend: \", res.data.data);\n        if (res.data.data.length) {\n          const { data } = res.data;\n          this.setState({\n            loading: false,\n            clients: data,\n            owners: utils.reduceDuplications(\n              utils.getClientProperty(CLIENTS_HEADERS[\"owner\"], data)\n            ),\n            currentClient: \"\",\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"err from clients backend: \", err);\n      });\n  }\n\n  getCurrentClient = (event) => {\n    const { clients, currentClient } = this.state;\n    const { value } = event.target;\n\n    let chosenClient = clients.filter((c) => value === c.name);\n\n    if (chosenClient.length && chosenClient[0] !== currentClient) {\n      this.setState({ currentClient: chosenClient[0] });\n    } else if (value === \"\") {\n      this.setState({ currentClient: value });\n    }\n  };\n\n  // sendUpdatedClient = async (client, key) => {\n  //     axios.put('http://localhost:8100/actions/update', {\n  //         _id: client._id,\n  //         owner: owner,\n  //         emailType: emailType,\n  //         sold: sold\n  //     })\n  //         .then((res) => {\n  //             console.log(res)\n  //         })\n  //         .catch((err) => {\n  //             console.log(err)\n  //         })\n  // }\n\n  updateClient = (updatedClientData) => {\n    const { currentClient } = this.state;\n\n    const updatedClient = {\n      emailType: updatedClientData.emailType\n        ? updatedClientData.emailType\n        : currentClient.emailType,\n      sold: updatedClientData.sold\n        ? updatedClientData.sold\n        : currentClient.sold,\n      owner: updatedClientData.owner\n        ? updatedClientData.owner\n        : currentClient.owner,\n    };\n\n    axios\n      .put(`${URL}${currentClient._id}`, {\n        ...currentClient,\n        ...updatedClient,\n      })\n      .then((res) => {\n        console.log(\"res from update client (put) backend \", res);\n      })\n      .catch((err) =>\n        console.log(\"err from update client (put) backend \", err)\n      );\n\n    this.setState({ currentClient: \"\" }, this.getClientsFromServer);\n\n    // this.sendUpdatedClient(client, updatedClient)\n  };\n\n  addNewClient = (newClient) => {\n    const { clients } = this.state;\n    // debugger;\n    axios\n      .post(`${URL}add`, newClient)\n      .then((res) => {\n        console.log(\"res from add new client (post) backend \", res);\n      })\n      .catch((err) => {\n        console.log(\"err from add new client (post) backend \", err);\n      });\n\n    this.setState(\n      {\n        clients: [...clients, newClient],\n      },\n      this.getClientsFromServer\n    );\n    //should get the client from the server with an Id, then update it in the state?\n    //Or get all the clients including the new client\n  };\n\n  render() {\n    const { loading, clients, owners, emailType, currentClient } = this.state;\n\n    if (loading) {\n      return (\n        <div id=\"loader-position\">\n          <Loader\n            type=\"Puff\"\n            color={COLORS[\"yellow\"]}\n            height={200}\n            width={200}\n          />\n        </div>\n      );\n    }\n    return (\n      <div id=\"actions-container\">\n        <div className=\"actions-child\">\n          <ActionHeader text={ACTION_HEADERS[\"main\"][\"update\"]} />\n        </div>\n        <div className=\"actions-child\">\n          <ClientInput\n            clients={clients}\n            getCurrentClient={this.getCurrentClient}\n          />\n        </div>\n        <div className=\"actions-child\">\n          <UpdateClient\n            owners={owners}\n            emailTypes={emailType}\n            updateClient={this.updateClient}\n            currentClient={currentClient}\n          />\n        </div>\n        <div id=\"section\" />\n        <div className=\"actions-child\">\n          <ActionHeader text={ACTION_HEADERS[\"main\"][\"addClient\"]} />\n        </div>\n        <div className=\"actions-child\">\n          <AddClient addNewClient={this.addNewClient} owners={owners} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ActionHeader = ({ text }) => <h1 className=\"actions-header\">{text}</h1>;\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}