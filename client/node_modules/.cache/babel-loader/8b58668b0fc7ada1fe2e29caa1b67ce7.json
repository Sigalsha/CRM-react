{"ast":null,"code":"import _objectSpread from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/sigal/code/projects/CRM-react/client/src/components/clients/Clients.js\";\nimport React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport axios from \"axios\"; // import call from \"../../ApiCalls/ApiCalls\";\n// import utils from \"../../utils/utils\";\n\nimport { URL, COLORS } from \"../../utils/consts\";\nimport { connect } from \"react-redux\";\nimport { getClients } from \"../../actions/clientsActions\";\nimport \"../../styles/clients/clients.css\";\nimport ColumnsHeader from \"./ColumnsHeader\";\nimport ClientsFilter from \"./ClientsFilter\";\nimport ClientsPagination from \"./ClientsPagination\";\nimport ClientRow from \"./ClientRow\";\nimport EditClientPopUp from \"./EditClientPopUp\";\nvar itemsPerPage = 20;\n\nvar Clients = /*#__PURE__*/function (_Component) {\n  _inherits(Clients, _Component);\n\n  function Clients() {\n    var _this;\n\n    _classCallCheck(this, Clients);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clients).call(this));\n\n    _this.submitInputChange = function (updatedClient) {\n      var _this$state = _this.state,\n          clientToEdit = _this$state.clientToEdit,\n          showPopup = _this$state.showPopup;\n      axios.put(\"\".concat(URL).concat(clientToEdit.id), updatedClient).then(function (res) {\n        console.log(\"res from update client (put) backend \", res);\n      }).catch(function (err) {\n        return console.log(\"err from update client (put) backend \", err);\n      });\n\n      _this.setState({\n        showPopup: !showPopup,\n        clientToEdit: {\n          id: null,\n          name: \"\",\n          country: \"\",\n          owner: \"\",\n          sold: false,\n          emailType: null\n        }\n      }, _this.getClientsFromServer);\n    };\n\n    _this.toggleEditClient = function () {\n      var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var showPopup = _this.state.showPopup;\n\n      _this.setState({\n        showPopup: !showPopup,\n        clientToEdit: client && {\n          id: client.id ? client.id : \"\",\n          name: client.name ? client.name : \"\",\n          country: client.country ? client.country : \"\",\n          owner: client.owner ? client.owner : \"\",\n          emailType: client.emailType ? client.emailType : null,\n          sold: client.sold ? client.sold : false\n        }\n      });\n    };\n\n    _this.updateDisplayByPage = function (pageDirection, pageNum) {\n      var _this$state2 = _this.state,\n          pageLimit = _this$state2.pageLimit,\n          clientsToDisplay = _this$state2.clientsToDisplay,\n          pageCount = _this$state2.pageCount;\n      var currentPageDisplay = [];\n      var currentPageLimit = pageLimit;\n      var pageIndex = pageNum * itemsPerPage; // if specific page =>\n\n      if (pageDirection === -1) {\n        if (pageNum === 1) {\n          currentPageDisplay = clientsToDisplay.slice(0, itemsPerPage);\n          currentPageLimit = 20;\n        } else {\n          currentPageDisplay = _this.updateCurrentPageDisplay(clientsToDisplay, itemsPerPage, pageIndex);\n          currentPageLimit = currentPageLimit - itemsPerPage;\n        }\n      } else {\n        if (pageNum >= pageCount) {\n          currentPageLimit = pageCount * itemsPerPage;\n        } else {\n          currentPageLimit = currentPageLimit + itemsPerPage;\n        }\n\n        currentPageDisplay = _this.updateCurrentPageDisplay(clientsToDisplay, itemsPerPage, pageIndex);\n      }\n\n      _this.setState({\n        currentClients: currentPageDisplay,\n        pageLimit: pageIndex,\n        isPageReset: false\n      });\n    };\n\n    _this.updateCurrentPageDisplay = function (clientsToDisplay, itemsPerPage, pageIndex) {\n      return clientsToDisplay.slice(pageIndex - itemsPerPage, pageIndex);\n    };\n\n    _this.updateClientsDisplay = function () {\n      var _this$state3 = _this.state,\n          clients = _this$state3.clients,\n          currentFilters = _this$state3.currentFilters;\n      var filtered = [];\n\n      if (Object.entries(currentFilters).length === 0) {\n        return _this.setState({\n          clientsToDisplay: _toConsumableArray(clients),\n          pageCount: _this.updatePageCount(_toConsumableArray(clients)),\n          currentClients: _toConsumableArray(clients).slice(0, itemsPerPage)\n        });\n      } else {\n        filtered = _this.filterByProperty();\n      }\n\n      _this.setState({\n        clientsToDisplay: filtered,\n        pageCount: _this.updatePageCount(filtered),\n        currentClients: filtered.slice(0, itemsPerPage),\n        isPageReset: true,\n        pageLimit: 20\n      });\n    };\n\n    _this.updateSelectedFilter = function (e) {\n      var currentFilters = _this.state.currentFilters;\n      var _e$target = e.target,\n          value = _e$target.value,\n          name = _e$target.name;\n      var filters = {};\n\n      if (name && value) {\n        if (value === \"All\") {\n          filters[name] = \"\";\n        } else if (name === \"sold\") {\n          if (value === \"Sold\") {\n            filters[name] = true;\n          } else {\n            filters[name] = false;\n          }\n        } else if (name === \"emailType\" && value === \"No Type\") {\n          filters[name] = null;\n        } else {\n          filters[name] = value;\n        }\n      }\n\n      _this.setState({\n        currentFilters: _objectSpread({}, currentFilters, filters)\n      }, _this.updateClientsDisplay);\n    };\n\n    _this.filterByProperty = function () {\n      var _this$state4 = _this.state,\n          clients = _this$state4.clients,\n          currentFilters = _this$state4.currentFilters;\n\n      var filteredClients = _toConsumableArray(clients);\n\n      var _loop = function _loop(key) {\n        if (currentFilters[key] !== \"\") {\n          filteredClients = filteredClients.filter(function (client) {\n            return client[key] === currentFilters[key];\n          });\n        }\n      };\n\n      for (var key in currentFilters) {\n        _loop(key);\n      }\n\n      return filteredClients;\n    };\n\n    _this.updatePageCount = function (clients) {\n      if (Math.ceil(clients.length / itemsPerPage) <= 1) {\n        return 1;\n      } else {\n        return Math.ceil(clients.length / itemsPerPage);\n      }\n    };\n\n    _this.state = {\n      loading: true,\n      showPopup: false,\n      clientToEdit: {},\n      clients: [],\n      pageCount: 0,\n      pageLimit: 20,\n      selectValue: \"\",\n      clientsToDisplay: [],\n      currentClients: [],\n      currentFilters: {}\n    };\n    return _this;\n  }\n\n  _createClass(Clients, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          clients = _this$props.clients,\n          loading = _this$props.loading;\n      this.setState({\n        loading: loading,\n        clients: clients\n      }, this.updateClientsDisplay); // this.getClientsFromServer();\n\n      /* setTimeout(() => {\n        let data = call.getClients();\n        // localStorage.removeItem(\"currentFilters\");\n        this.setState(\n          {\n            loading: false,\n            clients: data,\n          },\n          this.updateClientsDisplay\n        );\n      }, 1000); */\n    }\n  }, {\n    key: \"getClientsFromServer\",\n    value: function getClientsFromServer() {\n      this.props.getClients().then(function (clients) {\n        console.log(clients);\n      });\n      /*     this.props.getClients()\n        .then((this.props.clients) => {\n          console.log(\"clients from props \", this.props.clients);\n         this.setState({ loading: false, this.props.clients }, this.updateClientsDisplay);\n        })\n        .catch((err) => {\n          console.log(\"err from clients backend: \", err);\n        });  */\n\n      /*     axios\n        .get(URL)\n        .then((res) => {\n          console.log(\"res from clients backend: \", res.data.data);\n          if (res.data.data.length) {\n            const { data } = res.data;\n            this.setState(\n              { loading: false, clients: data },\n              this.updateClientsDisplay\n            );\n          }\n        })\n        .catch((err) => {\n          console.log(\"err from clients backend: \", err);\n        }); */\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          loading = _this$state5.loading,\n          clients = _this$state5.clients,\n          pageLimit = _this$state5.pageLimit,\n          selectValue = _this$state5.selectValue,\n          pageCount = _this$state5.pageCount,\n          currentClients = _this$state5.currentClients,\n          isPageReset = _this$state5.isPageReset,\n          showPopup = _this$state5.showPopup,\n          clientToEdit = _this$state5.clientToEdit;\n      console.log(\"clientToEdit\", clientToEdit);\n\n      if (loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"loader-position\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(Loader, {\n          type: \"Puff\",\n          color: COLORS[\"yellow\"],\n          height: 200,\n          width: 200,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 11\n          }\n        }));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"clients-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"clients-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ClientsFilter, {\n        clients: clients,\n        selectValue: selectValue,\n        updateSelectedFilter: this.updateSelectedFilter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"clients-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ClientsPagination, {\n        updateDisplayByPage: this.updateDisplayByPage,\n        pageLimit: pageLimit,\n        pageCount: pageCount,\n        isPageReset: isPageReset,\n        clients: currentClients,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"clients-child\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(ColumnsHeader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(ClientRow, {\n        submitInputChange: this.submitInputChange,\n        clients: currentClients,\n        toggleEditClient: this.toggleEditClient,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      })), showPopup && /*#__PURE__*/React.createElement(EditClientPopUp, {\n        clientToEdit: clientToEdit,\n        toggleEditClient: this.toggleEditClient,\n        submitInputChange: this.submitInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return Clients;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    clients: state.clients.clients,\n    loading: state.clients.loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getClients: getClients\n})(Clients);","map":{"version":3,"sources":["/home/sigal/code/projects/CRM-react/client/src/components/clients/Clients.js"],"names":["React","Component","Loader","axios","URL","COLORS","connect","getClients","ColumnsHeader","ClientsFilter","ClientsPagination","ClientRow","EditClientPopUp","itemsPerPage","Clients","submitInputChange","updatedClient","state","clientToEdit","showPopup","put","id","then","res","console","log","catch","err","setState","name","country","owner","sold","emailType","getClientsFromServer","toggleEditClient","client","updateDisplayByPage","pageDirection","pageNum","pageLimit","clientsToDisplay","pageCount","currentPageDisplay","currentPageLimit","pageIndex","slice","updateCurrentPageDisplay","currentClients","isPageReset","updateClientsDisplay","clients","currentFilters","filtered","Object","entries","length","updatePageCount","filterByProperty","updateSelectedFilter","e","target","value","filters","filteredClients","key","filter","Math","ceil","loading","selectValue","props","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport axios from \"axios\";\n// import call from \"../../ApiCalls/ApiCalls\";\n// import utils from \"../../utils/utils\";\nimport { URL, COLORS } from \"../../utils/consts\";\nimport { connect } from \"react-redux\";\nimport { getClients } from \"../../actions/clientsActions\";\nimport \"../../styles/clients/clients.css\";\nimport ColumnsHeader from \"./ColumnsHeader\";\nimport ClientsFilter from \"./ClientsFilter\";\nimport ClientsPagination from \"./ClientsPagination\";\nimport ClientRow from \"./ClientRow\";\nimport EditClientPopUp from \"./EditClientPopUp\";\n\nconst itemsPerPage = 20;\n\nclass Clients extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: true,\n      showPopup: false,\n      clientToEdit: {},\n      clients: [],\n      pageCount: 0,\n      pageLimit: 20,\n      selectValue: \"\",\n      clientsToDisplay: [],\n      currentClients: [],\n      currentFilters: {}\n    };\n  }\n\n  componentDidMount() {\n    const { clients, loading } = this.props;\n    this.setState({ loading, clients }, this.updateClientsDisplay);\n    // this.getClientsFromServer();\n    /* setTimeout(() => {\n      let data = call.getClients();\n      // localStorage.removeItem(\"currentFilters\");\n      this.setState(\n        {\n          loading: false,\n          clients: data,\n        },\n        this.updateClientsDisplay\n      );\n    }, 1000); */\n  }\n\n  getClientsFromServer() {\n    this.props.getClients().then((clients) => {\n      console.log(clients);\n    });\n    /*     this.props.getClients()\n      .then((this.props.clients) => {\n        console.log(\"clients from props \", this.props.clients);\n       this.setState({ loading: false, this.props.clients }, this.updateClientsDisplay);\n      })\n      .catch((err) => {\n        console.log(\"err from clients backend: \", err);\n      });  */\n\n    /*     axios\n      .get(URL)\n      .then((res) => {\n        console.log(\"res from clients backend: \", res.data.data);\n        if (res.data.data.length) {\n          const { data } = res.data;\n          this.setState(\n            { loading: false, clients: data },\n            this.updateClientsDisplay\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(\"err from clients backend: \", err);\n      }); */\n  }\n\n  submitInputChange = (updatedClient) => {\n    const { clientToEdit, showPopup } = this.state;\n\n    axios\n      .put(`${URL}${clientToEdit.id}`, updatedClient)\n      .then((res) => {\n        console.log(\"res from update client (put) backend \", res);\n      })\n      .catch((err) =>\n        console.log(\"err from update client (put) backend \", err)\n      );\n\n    this.setState(\n      {\n        showPopup: !showPopup,\n        clientToEdit: {\n          id: null,\n          name: \"\",\n          country: \"\",\n          owner: \"\",\n          sold: false,\n          emailType: null\n        }\n      },\n      this.getClientsFromServer\n    );\n  };\n\n  toggleEditClient = (client = null) => {\n    const { showPopup } = this.state;\n    this.setState({\n      showPopup: !showPopup,\n      clientToEdit: client && {\n        id: client.id ? client.id : \"\",\n        name: client.name ? client.name : \"\",\n        country: client.country ? client.country : \"\",\n        owner: client.owner ? client.owner : \"\",\n        emailType: client.emailType ? client.emailType : null,\n        sold: client.sold ? client.sold : false\n      }\n    });\n  };\n\n  updateDisplayByPage = (pageDirection, pageNum) => {\n    const { pageLimit, clientsToDisplay, pageCount } = this.state;\n\n    let currentPageDisplay = [];\n    let currentPageLimit = pageLimit;\n    let pageIndex = pageNum * itemsPerPage;\n\n    // if specific page =>\n    if (pageDirection === -1) {\n      if (pageNum === 1) {\n        currentPageDisplay = clientsToDisplay.slice(0, itemsPerPage);\n        currentPageLimit = 20;\n      } else {\n        currentPageDisplay = this.updateCurrentPageDisplay(\n          clientsToDisplay,\n          itemsPerPage,\n          pageIndex\n        );\n        currentPageLimit = currentPageLimit - itemsPerPage;\n      }\n    } else {\n      if (pageNum >= pageCount) {\n        currentPageLimit = pageCount * itemsPerPage;\n      } else {\n        currentPageLimit = currentPageLimit + itemsPerPage;\n      }\n      currentPageDisplay = this.updateCurrentPageDisplay(\n        clientsToDisplay,\n        itemsPerPage,\n        pageIndex\n      );\n    }\n\n    this.setState({\n      currentClients: currentPageDisplay,\n      pageLimit: pageIndex,\n      isPageReset: false\n    });\n  };\n\n  updateCurrentPageDisplay = (clientsToDisplay, itemsPerPage, pageIndex) => {\n    return clientsToDisplay.slice(pageIndex - itemsPerPage, pageIndex);\n  };\n\n  updateClientsDisplay = () => {\n    const { clients, currentFilters } = this.state;\n\n    let filtered = [];\n\n    if (Object.entries(currentFilters).length === 0) {\n      return this.setState({\n        clientsToDisplay: [...clients],\n        pageCount: this.updatePageCount([...clients]),\n        currentClients: [...clients].slice(0, itemsPerPage)\n      });\n    } else {\n      filtered = this.filterByProperty();\n    }\n\n    this.setState({\n      clientsToDisplay: filtered,\n      pageCount: this.updatePageCount(filtered),\n      currentClients: filtered.slice(0, itemsPerPage),\n      isPageReset: true,\n      pageLimit: 20\n    });\n  };\n\n  updateSelectedFilter = (e) => {\n    const { currentFilters } = this.state;\n    const { value, name } = e.target;\n    let filters = {};\n\n    if (name && value) {\n      if (value === \"All\") {\n        filters[name] = \"\";\n      } else if (name === \"sold\") {\n        if (value === \"Sold\") {\n          filters[name] = true;\n        } else {\n          filters[name] = false;\n        }\n      } else if (name === \"emailType\" && value === \"No Type\") {\n        filters[name] = null;\n      } else {\n        filters[name] = value;\n      }\n    }\n\n    this.setState(\n      {\n        currentFilters: { ...currentFilters, ...filters }\n      },\n      this.updateClientsDisplay\n    );\n  };\n\n  filterByProperty = () => {\n    const { clients, currentFilters } = this.state;\n    let filteredClients = [...clients];\n\n    for (let key in currentFilters) {\n      if (currentFilters[key] !== \"\") {\n        filteredClients = filteredClients.filter(\n          (client) => client[key] === currentFilters[key]\n        );\n      }\n    }\n    return filteredClients;\n  };\n\n  updatePageCount = (clients) => {\n    if (Math.ceil(clients.length / itemsPerPage) <= 1) {\n      return 1;\n    } else {\n      return Math.ceil(clients.length / itemsPerPage);\n    }\n  };\n\n  render() {\n    const {\n      loading,\n      clients,\n      pageLimit,\n      selectValue,\n      pageCount,\n      currentClients,\n      isPageReset,\n      showPopup,\n      clientToEdit\n    } = this.state;\n    console.log(\"clientToEdit\", clientToEdit);\n\n    if (loading) {\n      return (\n        <div id=\"loader-position\">\n          <Loader\n            type=\"Puff\"\n            color={COLORS[\"yellow\"]}\n            height={200}\n            width={200}\n          />\n        </div>\n      );\n    }\n    return (\n      <div id=\"clients-container\">\n        <div className=\"clients-child\">\n          <ClientsFilter\n            clients={clients}\n            selectValue={selectValue}\n            updateSelectedFilter={this.updateSelectedFilter}\n          />\n        </div>\n        <div className=\"clients-child\">\n          <ClientsPagination\n            updateDisplayByPage={this.updateDisplayByPage}\n            pageLimit={pageLimit}\n            pageCount={pageCount}\n            isPageReset={isPageReset}\n            clients={currentClients}\n          />\n        </div>\n        <div className=\"clients-child\">\n          <table>\n            <ColumnsHeader />\n            <ClientRow\n              submitInputChange={this.submitInputChange}\n              clients={currentClients}\n              toggleEditClient={this.toggleEditClient}\n            />\n          </table>\n          {showPopup && (\n            <EditClientPopUp\n              clientToEdit={clientToEdit}\n              toggleEditClient={this.toggleEditClient}\n              submitInputChange={this.submitInputChange}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  clients: state.clients.clients,\n  loading: state.clients.loading\n});\n\nexport default connect(mapStateToProps, { getClients })(Clients);\n"]},"metadata":{},"sourceType":"module"}