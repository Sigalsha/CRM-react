{"ast":null,"code":"import _toConsumableArray from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar Utils = function Utils() {\n  var _this = this;\n\n  _classCallCheck(this, Utils);\n\n  this.getClientProperty = function (property, clients) {\n    return clients.map(function (c) {\n      return c[property];\n    });\n  };\n\n  this.reduceDuplications = function (arrArg) {\n    return arrArg.filter(function (elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  this.findClientIndex = function (clients, client) {\n    for (var i in clients) {\n      if (clients[i].client === client) {\n        return i;\n      }\n    }\n  };\n\n  this.findClientIndexById = function (clients, id) {\n    for (var i in clients) {\n      if (clients[i]._id === id) {\n        return i;\n      }\n    }\n\n    return false;\n  };\n\n  this.isFrom2018 = function (startYear, isBefore) {\n    var year = startYear.slice(0, 4);\n\n    if (isBefore) {\n      return year < 2018;\n    } else {\n      return year >= 2018;\n    }\n  };\n\n  this.filterSalesByYear = function (firstContactDate, year) {\n    return firstContactDate.slice(0, 4) === year;\n  };\n\n  this.getSales = function (clientsToFilter, isSold) {\n    return clientsToFilter.filter(function (c) {\n      return c.sold === isSold;\n    });\n  };\n\n  this.getSalesByProperty = function (key, clientsToFilter) {\n    return _this.getClientProperty(key, utils.getSales(clientsToFilter, true));\n  };\n\n  this.countSalesByKey = function (sales) {\n    return sales.reduce(function (a, c) {\n      a[c] = (a[c] || 0) + 1;\n      return a;\n    }, {});\n  };\n\n  this.getTopSalesByKey = function (sales) {\n    var salesCounts = _this.countSalesByKey(sales);\n\n    console.log(\"salesCounts: \", salesCounts);\n    var maxCount = Math.max.apply(Math, _toConsumableArray(Object.values(salesCounts)));\n    var mostFrequent = Object.keys(salesCounts).filter(function (k) {\n      return salesCounts[k] === maxCount;\n    });\n    console.log(\"mostFrequent: \", mostFrequent);\n    return mostFrequent;\n  };\n\n  this.getSalesByMonth = function (sales, month) {\n    var fixedDates = sales.map(function (sale) {\n      return new Date(sale.firstContact);\n    });\n    var filteredByMonth = fixedDates.filter(function (d) {\n      return d.getMonth() === month;\n    });\n    return filteredByMonth.length;\n  };\n};\n\nvar utils = new Utils();\nexport default utils;","map":{"version":3,"sources":["/home/sigal/code/projects/CRM-react/client/src/utils/utils.js"],"names":["Utils","getClientProperty","property","clients","map","c","reduceDuplications","arrArg","filter","elem","pos","arr","indexOf","findClientIndex","client","i","findClientIndexById","id","_id","isFrom2018","startYear","isBefore","year","slice","filterSalesByYear","firstContactDate","getSales","clientsToFilter","isSold","sold","getSalesByProperty","key","utils","countSalesByKey","sales","reduce","a","getTopSalesByKey","salesCounts","console","log","maxCount","Math","max","Object","values","mostFrequent","keys","k","getSalesByMonth","month","fixedDates","sale","Date","firstContact","filteredByMonth","d","getMonth","length"],"mappings":"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","sourcesContent":["class Utils {\n  getClientProperty = (property, clients) => {\n    return clients.map((c) => c[property]);\n  };\n\n  reduceDuplications = (arrArg) => {\n    return arrArg.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  findClientIndex = (clients, client) => {\n    for (let i in clients) {\n      if (clients[i].client === client) {\n        return i;\n      }\n    }\n  };\n\n  findClientIndexById = (clients, id) => {\n    for (let i in clients) {\n      if (clients[i]._id === id) {\n        return i;\n      }\n    }\n    return false;\n  };\n\n  isFrom2018 = (startYear, isBefore) => {\n    let year = startYear.slice(0, 4);\n    if (isBefore) {\n      return year < 2018;\n    } else {\n      return year >= 2018;\n    }\n  };\n\n  filterSalesByYear = (firstContactDate, year) => {\n    return firstContactDate.slice(0, 4) === year;\n  };\n\n  getSales = (clientsToFilter, isSold) =>\n    clientsToFilter.filter((c) => c.sold === isSold);\n\n  getSalesByProperty = (key, clientsToFilter) => {\n    return this.getClientProperty(key, utils.getSales(clientsToFilter, true));\n  };\n\n  countSalesByKey = (sales) => {\n    return sales.reduce((a, c) => {\n      a[c] = (a[c] || 0) + 1;\n      return a;\n    }, {});\n  };\n\n  getTopSalesByKey = (sales) => {\n    let salesCounts = this.countSalesByKey(sales);\n    console.log(\"salesCounts: \", salesCounts);\n    let maxCount = Math.max(...Object.values(salesCounts));\n    let mostFrequent = Object.keys(salesCounts).filter(\n      (k) => salesCounts[k] === maxCount\n    );\n    console.log(\"mostFrequent: \", mostFrequent);\n    return mostFrequent;\n  };\n\n  getSalesByMonth = (sales, month) => {\n    const fixedDates = sales.map((sale) => {\n      return new Date(sale.firstContact);\n    });\n    const filteredByMonth = fixedDates.filter((d) => d.getMonth() === month);\n    return filteredByMonth.length;\n  };\n}\n\nlet utils = new Utils();\n\nexport default utils;\n"]},"metadata":{},"sourceType":"module"}