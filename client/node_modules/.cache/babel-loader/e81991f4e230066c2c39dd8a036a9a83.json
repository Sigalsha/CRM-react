{"ast":null,"code":"import _defineProperty from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/sigal/code/projects/CRM-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/home/sigal/code/projects/CRM-react/client/src/components/actions/UpdateClient.js\",\n    _this2 = this;\n\nimport React, { Component } from \"react\";\nimport { ACTIONS_ALERTS, ACTION_HEADERS, ACTIONS_BUTTONS } from \"../../utils/consts\";\nimport Alert from \"../general/Alert\";\nimport Datalist from \"./Datalist\";\nimport ActionSubHeader from \"./ActionSubHeader\";\nimport \"../../styles/actions/updateClient.css\";\n\nvar UpdateClient = /*#__PURE__*/function (_Component) {\n  _inherits(UpdateClient, _Component);\n\n  function UpdateClient(props) {\n    var _this;\n\n    _classCallCheck(this, UpdateClient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateClient).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      var _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.resetInputes = function () {\n      Array.from(document.querySelectorAll(\"input\")).forEach(function (input) {\n        return input.value = \"\";\n      });\n    };\n\n    _this.changeOwner = function () {\n      var owner = _this.state.owner;\n      var _this$props = _this.props,\n          currentClient = _this$props.currentClient,\n          updateClient = _this$props.updateClient;\n\n      if (!currentClient) {\n        _this.setState({\n          alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"],\n          alert: true,\n          owner: \"\"\n        }, _this.resetInputes());\n\n        return;\n      }\n\n      if (!owner) {\n        _this.setState({\n          alertText: ACTIONS_ALERTS[\"update\"][\"owner\"],\n          alert: true\n        });\n\n        console.log(\"current client\", _this.props.currentClient);\n        return;\n      }\n\n      updateClient({\n        id: currentClient._id,\n        owner: owner\n      }, _this.resetInputes());\n    };\n\n    _this.changeEmailType = function () {\n      var emailType = _this.state.emailType;\n      var _this$props2 = _this.props,\n          currentClient = _this$props2.currentClient,\n          updateClient = _this$props2.updateClient;\n\n      if (!currentClient) {\n        _this.setState({\n          alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"],\n          alert: true\n        }, _this.resetInputes());\n\n        return;\n      }\n\n      if (!emailType) {\n        _this.setState({\n          alertText: ACTIONS_ALERTS[\"update\"][\"emailType\"],\n          alert: true\n        });\n\n        return;\n      }\n\n      updateClient({\n        id: currentClient._id,\n        emailType: emailType\n      }, _this.resetInputes());\n    };\n\n    _this.declareSold = function () {\n      var _this$props3 = _this.props,\n          currentClient = _this$props3.currentClient,\n          updateClient = _this$props3.updateClient;\n\n      if (currentClient && currentClient.sold) {\n        _this.setState({\n          alertText: ACTIONS_ALERTS[\"update\"][\"declareSale\"],\n          alert: true\n        }, _this.resetInputes());\n\n        return;\n      } else {\n        if (!currentClient) {\n          _this.setState({\n            alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"],\n            alert: true\n          }, _this.resetInputes());\n\n          return;\n        }\n\n        updateClient({\n          id: currentClient._id,\n          sold: true\n        }, _this.resetInputes());\n      }\n    };\n\n    _this.toggleAlert = function () {\n      _this.setState({\n        alert: !alert\n      });\n    };\n\n    _this.state = {\n      owners: _this.props.owners,\n      emailTypes: _this.props.emailTypes,\n      owner: \"\",\n      emailType: \"\",\n      alert: false,\n      alertText: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(UpdateClient, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          owners = _this$state.owners,\n          emailTypes = _this$state.emailTypes,\n          alert = _this$state.alert,\n          alertText = _this$state.alertText;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"update-client-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, alert && /*#__PURE__*/React.createElement(Alert, {\n        text: alertText,\n        toggleAlert: this.toggleAlert,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(ActionSubHeader, {\n        text: ACTION_HEADERS[\"update\"][\"transferOwnership\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Datalist, {\n        list: owners,\n        placeholder: \"Owner\",\n        id: owners,\n        mapList: owners,\n        name: \"owner\",\n        onChange: this.handleInputChange,\n        onFocuse: this.onFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(UpdateButton, {\n        onClick: this.changeOwner,\n        text: ACTIONS_BUTTONS[\"update\"][\"transfer\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ActionSubHeader, {\n        text: ACTION_HEADERS[\"update\"][\"sendEmail\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Datalist, {\n        list: emailTypes,\n        placeholder: \"Email Type\",\n        id: emailTypes,\n        mapList: emailTypes,\n        name: \"emailType\",\n        onChange: this.handleInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(UpdateButton, {\n        onClick: this.changeEmailType,\n        text: ACTIONS_BUTTONS[\"update\"][\"send\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(ActionSubHeader, {\n        text: ACTION_HEADERS[\"update\"][\"declareSale\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"empty-div\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(UpdateButton, {\n        onClick: this.declareSold,\n        text: ACTIONS_BUTTONS[\"update\"][\"declare\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return UpdateClient;\n}(Component);\n\nvar UpdateButton = function UpdateButton(_ref) {\n  var onClick = _ref.onClick,\n      text = _ref.text;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"light-btn\",\n    onClick: onClick,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, text);\n};\n\nexport default UpdateClient;","map":{"version":3,"sources":["/home/sigal/code/projects/CRM-react/client/src/components/actions/UpdateClient.js"],"names":["React","Component","ACTIONS_ALERTS","ACTION_HEADERS","ACTIONS_BUTTONS","Alert","Datalist","ActionSubHeader","UpdateClient","props","handleInputChange","event","target","value","name","setState","resetInputes","Array","from","document","querySelectorAll","forEach","input","changeOwner","owner","state","currentClient","updateClient","alertText","alert","console","log","id","_id","changeEmailType","emailType","declareSold","sold","toggleAlert","owners","emailTypes","onFocus","UpdateButton","onClick","text"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,eAHF,QAIO,oBAJP;AAKA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,uCAAP;;IACMC,Y;;;AACJ,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;;AADiB,UAYnBC,iBAZmB,GAYC,UAACC,KAAD,EAAW;AAAA,0BAGzBA,KAHyB,CAE3BC,MAF2B;AAAA,UAEjBC,KAFiB,iBAEjBA,KAFiB;AAAA,UAEVC,IAFU,iBAEVA,IAFU;;AAI7B,YAAKC,QAAL,qBACGD,IADH,EACUD,KADV;AAGD,KAnBkB;;AAAA,UA+BnBG,YA/BmB,GA+BJ,YAAM;AACnBC,MAAAA,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAX,EAA+CC,OAA/C,CACE,UAACC,KAAD;AAAA,eAAYA,KAAK,CAACT,KAAN,GAAc,EAA1B;AAAA,OADF;AAGD,KAnCkB;;AAAA,UAqCnBU,WArCmB,GAqCL,YAAM;AAAA,UACVC,KADU,GACA,MAAKC,KADL,CACVD,KADU;AAAA,wBAEsB,MAAKf,KAF3B;AAAA,UAEViB,aAFU,eAEVA,aAFU;AAAA,UAEKC,YAFL,eAEKA,YAFL;;AAIlB,UAAI,CAACD,aAAL,EAAoB;AAClB,cAAKX,QAAL,CACE;AACEa,UAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,eAAzB,CADb;AAEE2B,UAAAA,KAAK,EAAE,IAFT;AAGEL,UAAAA,KAAK,EAAE;AAHT,SADF,EAME,MAAKR,YAAL,EANF;;AAQA;AACD;;AAED,UAAI,CAACQ,KAAL,EAAY;AACV,cAAKT,QAAL,CAAc;AACZa,UAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,OAAzB,CADC;AAEZ2B,UAAAA,KAAK,EAAE;AAFK,SAAd;;AAIAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,MAAKtB,KAAL,CAAWiB,aAAzC;AAEA;AACD;;AAEDC,MAAAA,YAAY,CAAC;AAAEK,QAAAA,EAAE,EAAEN,aAAa,CAACO,GAApB;AAAyBT,QAAAA,KAAK,EAALA;AAAzB,OAAD,EAAmC,MAAKR,YAAL,EAAnC,CAAZ;AACD,KAhEkB;;AAAA,UAkEnBkB,eAlEmB,GAkED,YAAM;AAAA,UACdC,SADc,GACA,MAAKV,KADL,CACdU,SADc;AAAA,yBAEkB,MAAK1B,KAFvB;AAAA,UAEdiB,aAFc,gBAEdA,aAFc;AAAA,UAECC,YAFD,gBAECA,YAFD;;AAItB,UAAI,CAACD,aAAL,EAAoB;AAClB,cAAKX,QAAL,CACE;AAAEa,UAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,eAAzB,CAAb;AAAwD2B,UAAAA,KAAK,EAAE;AAA/D,SADF,EAEE,MAAKb,YAAL,EAFF;;AAIA;AACD;;AAED,UAAI,CAACmB,SAAL,EAAgB;AACd,cAAKpB,QAAL,CAAc;AACZa,UAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,WAAzB,CADC;AAEZ2B,UAAAA,KAAK,EAAE;AAFK,SAAd;;AAIA;AACD;;AAEDF,MAAAA,YAAY,CAAC;AAAEK,QAAAA,EAAE,EAAEN,aAAa,CAACO,GAApB;AAAyBE,QAAAA,SAAS,EAATA;AAAzB,OAAD,EAAuC,MAAKnB,YAAL,EAAvC,CAAZ;AACD,KAvFkB;;AAAA,UAyFnBoB,WAzFmB,GAyFL,YAAM;AAAA,yBACsB,MAAK3B,KAD3B;AAAA,UACViB,aADU,gBACVA,aADU;AAAA,UACKC,YADL,gBACKA,YADL;;AAGlB,UAAID,aAAa,IAAIA,aAAa,CAACW,IAAnC,EAAyC;AACvC,cAAKtB,QAAL,CACE;AAAEa,UAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,aAAzB,CAAb;AAAsD2B,UAAAA,KAAK,EAAE;AAA7D,SADF,EAEE,MAAKb,YAAL,EAFF;;AAIA;AACD,OAND,MAMO;AACL,YAAI,CAACU,aAAL,EAAoB;AAClB,gBAAKX,QAAL,CACE;AAAEa,YAAAA,SAAS,EAAE1B,cAAc,CAAC,QAAD,CAAd,CAAyB,eAAzB,CAAb;AAAwD2B,YAAAA,KAAK,EAAE;AAA/D,WADF,EAEE,MAAKb,YAAL,EAFF;;AAIA;AACD;;AACDW,QAAAA,YAAY,CAAC;AAAEK,UAAAA,EAAE,EAAEN,aAAa,CAACO,GAApB;AAAyBI,UAAAA,IAAI,EAAE;AAA/B,SAAD,EAAwC,MAAKrB,YAAL,EAAxC,CAAZ;AACD;AACF,KA5GkB;;AAAA,UA8GnBsB,WA9GmB,GA8GL,YAAM;AAClB,YAAKvB,QAAL,CAAc;AAAEc,QAAAA,KAAK,EAAE,CAACA;AAAV,OAAd;AACD,KAhHkB;;AAEjB,UAAKJ,KAAL,GAAa;AACXc,MAAAA,MAAM,EAAE,MAAK9B,KAAL,CAAW8B,MADR;AAEXC,MAAAA,UAAU,EAAE,MAAK/B,KAAL,CAAW+B,UAFZ;AAGXhB,MAAAA,KAAK,EAAE,EAHI;AAIXW,MAAAA,SAAS,EAAE,EAJA;AAKXN,MAAAA,KAAK,EAAE,KALI;AAMXD,MAAAA,SAAS,EAAE;AANA,KAAb;AAFiB;AAUlB;;;;6BAwGQ;AAAA,wBAC0C,KAAKH,KAD/C;AAAA,UACCc,MADD,eACCA,MADD;AAAA,UACSC,UADT,eACSA,UADT;AAAA,UACqBX,KADrB,eACqBA,KADrB;AAAA,UAC4BD,SAD5B,eAC4BA,SAD5B;AAGP,0BACE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,KAAK,iBAAI,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAED,SAAb;AAAwB,QAAA,WAAW,EAAE,KAAKU,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADZ,eAEE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEnC,cAAc,CAAC,QAAD,CAAd,CAAyB,mBAAzB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAGE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEoC,MADR;AAEE,QAAA,WAAW,EAAC,OAFd;AAGE,QAAA,EAAE,EAAEA,MAHN;AAIE,QAAA,OAAO,EAAEA,MAJX;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,QAAQ,EAAE,KAAK7B,iBANjB;AAOE,QAAA,QAAQ,EAAE,KAAK+B,OAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,eAYE,oBAAC,YAAD;AACE,QAAA,OAAO,EAAE,KAAKlB,WADhB;AAEE,QAAA,IAAI,EAAEnB,eAAe,CAAC,QAAD,CAAf,CAA0B,UAA1B,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZF,eAiBE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,cAAc,CAAC,QAAD,CAAd,CAAyB,WAAzB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,eAkBE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEqC,UADR;AAEE,QAAA,WAAW,EAAC,YAFd;AAGE,QAAA,EAAE,EAAEA,UAHN;AAIE,QAAA,OAAO,EAAEA,UAJX;AAKE,QAAA,IAAI,EAAC,WALP;AAME,QAAA,QAAQ,EAAE,KAAK9B,iBANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBF,eA0BE,oBAAC,YAAD;AACE,QAAA,OAAO,EAAE,KAAKwB,eADhB;AAEE,QAAA,IAAI,EAAE9B,eAAe,CAAC,QAAD,CAAf,CAA0B,MAA1B,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF,eA+BE,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,cAAc,CAAC,QAAD,CAAd,CAAyB,aAAzB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/BF,eAgCE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhCF,eAiCE,oBAAC,YAAD;AACE,QAAA,OAAO,EAAE,KAAKiC,WADhB;AAEE,QAAA,IAAI,EAAEhC,eAAe,CAAC,QAAD,CAAf,CAA0B,SAA1B,CAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjCF,CADF;AAwCD;;;;EA9JwBH,S;;AAiK3B,IAAMyC,YAAY,GAAG,SAAfA,YAAe,OAAuB;AAAA,MAApBC,OAAoB,QAApBA,OAAoB;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC1C,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,OAAO,EAAED,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IADH,CADF;AAKD,CAND;;AAQA,eAAepC,YAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  ACTIONS_ALERTS,\n  ACTION_HEADERS,\n  ACTIONS_BUTTONS,\n} from \"../../utils/consts\";\nimport Alert from \"../general/Alert\";\nimport Datalist from \"./Datalist\";\nimport ActionSubHeader from \"./ActionSubHeader\";\nimport \"../../styles/actions/updateClient.css\";\nclass UpdateClient extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      owners: this.props.owners,\n      emailTypes: this.props.emailTypes,\n      owner: \"\",\n      emailType: \"\",\n      alert: false,\n      alertText: \"\",\n    };\n  }\n\n  handleInputChange = (event) => {\n    const {\n      target: { value, name },\n    } = event;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  /*   validateAction = (clientAction, alertType) => {\n    if (!clientAction) {\n      this.setState({\n        alertText: ACTIONS_ALERTS[\"update\"][alertType],\n        alert: true,\n      });\n    }\n    return;\n  }; */\n\n  resetInputes = () => {\n    Array.from(document.querySelectorAll(\"input\")).forEach(\n      (input) => (input.value = \"\")\n    );\n  };\n\n  changeOwner = () => {\n    const { owner } = this.state;\n    const { currentClient, updateClient } = this.props;\n\n    if (!currentClient) {\n      this.setState(\n        {\n          alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"],\n          alert: true,\n          owner: \"\",\n        },\n        this.resetInputes()\n      );\n      return;\n    }\n\n    if (!owner) {\n      this.setState({\n        alertText: ACTIONS_ALERTS[\"update\"][\"owner\"],\n        alert: true,\n      });\n      console.log(\"current client\", this.props.currentClient);\n\n      return;\n    }\n\n    updateClient({ id: currentClient._id, owner }, this.resetInputes());\n  };\n\n  changeEmailType = () => {\n    const { emailType } = this.state;\n    const { currentClient, updateClient } = this.props;\n\n    if (!currentClient) {\n      this.setState(\n        { alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"], alert: true },\n        this.resetInputes()\n      );\n      return;\n    }\n\n    if (!emailType) {\n      this.setState({\n        alertText: ACTIONS_ALERTS[\"update\"][\"emailType\"],\n        alert: true,\n      });\n      return;\n    }\n\n    updateClient({ id: currentClient._id, emailType }, this.resetInputes());\n  };\n\n  declareSold = () => {\n    const { currentClient, updateClient } = this.props;\n\n    if (currentClient && currentClient.sold) {\n      this.setState(\n        { alertText: ACTIONS_ALERTS[\"update\"][\"declareSale\"], alert: true },\n        this.resetInputes()\n      );\n      return;\n    } else {\n      if (!currentClient) {\n        this.setState(\n          { alertText: ACTIONS_ALERTS[\"update\"][\"currentClient\"], alert: true },\n          this.resetInputes()\n        );\n        return;\n      }\n      updateClient({ id: currentClient._id, sold: true }, this.resetInputes());\n    }\n  };\n\n  toggleAlert = () => {\n    this.setState({ alert: !alert });\n  };\n\n  render() {\n    const { owners, emailTypes, alert, alertText } = this.state;\n\n    return (\n      <div className=\"update-client-container\">\n        {alert && <Alert text={alertText} toggleAlert={this.toggleAlert} />}\n        <ActionSubHeader text={ACTION_HEADERS[\"update\"][\"transferOwnership\"]} />\n        <Datalist\n          list={owners}\n          placeholder=\"Owner\"\n          id={owners}\n          mapList={owners}\n          name=\"owner\"\n          onChange={this.handleInputChange}\n          onFocuse={this.onFocus}\n        />\n        <UpdateButton\n          onClick={this.changeOwner}\n          text={ACTIONS_BUTTONS[\"update\"][\"transfer\"]}\n        />\n\n        <ActionSubHeader text={ACTION_HEADERS[\"update\"][\"sendEmail\"]} />\n        <Datalist\n          list={emailTypes}\n          placeholder=\"Email Type\"\n          id={emailTypes}\n          mapList={emailTypes}\n          name=\"emailType\"\n          onChange={this.handleInputChange}\n        />\n        <UpdateButton\n          onClick={this.changeEmailType}\n          text={ACTIONS_BUTTONS[\"update\"][\"send\"]}\n        />\n\n        <ActionSubHeader text={ACTION_HEADERS[\"update\"][\"declareSale\"]} />\n        <div className=\"empty-div\" />\n        <UpdateButton\n          onClick={this.declareSold}\n          text={ACTIONS_BUTTONS[\"update\"][\"declare\"]}\n        />\n      </div>\n    );\n  }\n}\n\nconst UpdateButton = ({ onClick, text }) => {\n  return (\n    <div className=\"light-btn\" onClick={onClick}>\n      {text}\n    </div>\n  );\n};\n\nexport default UpdateClient;\n"]},"metadata":{},"sourceType":"module"}